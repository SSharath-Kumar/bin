#!/bin/bash

# Initialize debug flag to off
debug=false

# Function to display usage information
usage() {
    cat <<EOF
Usage: $(basename "$0") [--debug] <reference_branch>

Updates all branches with open pull requests authored by you by:
1. Checking out the branch.
2. Merging the specified reference branch into it.
3. Pushing the updated branch to the remote.

Options:
  --debug   Enable debugging output.
  --help    Show this help message and exit.

Arguments:
  <reference_branch>  The branch to merge into your branches (e.g., 'main').

Examples:
  $(basename "$0") main
  $(basename "$0") --debug main
EOF
    exit 0
}

# Parse command-line arguments
reference_branch=""
while [[ $# -gt 0 ]]; do
    case "$1" in
        --debug)
            debug=true
            shift
            ;;
        --help)
            usage
            ;;
        -*)
            echo "Unknown option: $1" >&2
            usage
            ;;
        *)
            if [ -z "$reference_branch" ]; then
                reference_branch="$1"
            else
                echo "Error: Multiple reference branches specified: '$reference_branch' and '$1'" >&2
                usage
            fi
            shift
            ;;
    esac
done

# Validate that a reference branch was provided
if [ -z "$reference_branch" ]; then
    echo "Error: Missing <reference_branch> argument." >&2
    echo "Use --help for usage information." >&2
    exit 1
fi

# Enable debugging if --debug flag is set
if [ "$debug" = true ]; then
    set -x
fi

# Ensure we are inside a Git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "Error: Not inside a Git repository." >&2
    exit 1
fi

# List open pull requests authored by the current user and iterate through branches
gh pr list --author "@me" --state open --json headRefName -q '.[].headRefName' | while read -r branch; do
    echo "Processing branch: $branch"

    # Checkout the branch
    if ! git checkout "$branch"; then
        echo "Error: Failed to checkout branch $branch. Skipping..."
        continue
    fi

    # Merge the reference branch into the current branch
    if ! mergewith "$reference_branch"; then
        echo "Error: Failed to merge $reference_branch into $branch. Skipping..."
        git merge --abort >/dev/null 2>&1
        continue
    fi

    # Push the updated branch
    if git push origin "$branch"; then
        echo "Successfully updated and pushed branch: $branch"
    else
        echo "Error: Failed to push branch $branch. Skipping..."
    fi
done
